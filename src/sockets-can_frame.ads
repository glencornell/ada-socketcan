-- MIT License
--
-- Copyright (c) 2021 Glen Cornell <glen.m.cornell@gmail.com>
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.

with Interfaces;

package Sockets.Can_Frame is 
   
   pragma Pure;
   
   type Can_Id_Type is mod 2 ** 32;
   
   --  special address description flags for the CAN ID
   CAN_EFF_FLAG        : constant := 16#80000000#; --  EFF/SFF is set in the MSB
   CAN_RTR_FLAG        : constant := 16#40000000#; --  remote transmission request
   CAN_ERR_FLAG        : constant := 16#20000000#; --  error message frame 
   
   -- valid bits in CAN ID for frame formats 
   CAN_SFF_MASK        : constant := 16#000007FF#; --  standard frame format (SFF)
   CAN_EFF_MASK        : constant := 16#1FFFFFFF#; --  extended frame format (EFF)
   CAN_ERR_MASK        : constant := 16#1FFFFFFF#; --  omit EFF, RTR, ERR flags
   
   CAN_SFF_ID_BITS : constant := 11;
   CAN_EFF_ID_BITS : constant := 29;
   
   --  DLC = data length code = CAN frame payload size in bytes [0..8]
   type Can_Dlc_Type is range 0..8;
   
   -- The CAN frame payload data 
   type Can_Frame_Data_Array is array (Can_Dlc_Type range 1 .. Can_Dlc_Type'Last) of aliased Interfaces.Unsigned_8;
   
   -- The same as above, but for use in thick bindings
   type Unconstrained_Can_Frame_Data_Array is array (Can_Dlc_Type range <>) of aliased Interfaces.Unsigned_8;
   
   ---------------------------------
   --  Basic CAN frame defintion  --
   ---------------------------------
   
   type can_frame is record
      Can_Id   : aliased Can_Id_Type;            -- 32 bit CAN_ID + EFF/RTR/ERR flags
      Can_Dlc  : aliased Can_Dlc_Type;           -- frame payload length in bytes
      Uu_Pad   : aliased Interfaces.Unsigned_8;  -- padding  
      Uu_Res0  : aliased Interfaces.Unsigned_8;  -- reserved / padding  
      Uu_Res1  : aliased Interfaces.Unsigned_8;  -- reserved / padding  
      Data     : aliased Can_Frame_Data_Array;
   end record;
   
   -------------------
   --  CAN-FD Frame --
   -------------------
   
   --  defined bits for canfd_frame.flags
   -- 
   --  The use of struct canfd_frame implies the Extended Data Length (EDL) bit to
   --  be set in the CAN frame bitstream on the wire. The EDL bit switch turns
   --  the CAN controllers bitstream processor into the CAN FD mode which creates
   --  two new options within the CAN FD frame specification:
   -- 
   --  Bit Rate Switch - to indicate a second bitrate is/was used for the payload
   --  Error State Indicator - represents the error state of the transmitting node
   -- 
   --  As the CANFD_ESI bit is internally generated by the transmitting CAN
   --  controller only the CANFD_BRS bit is relevant for real CAN controllers when
   --  building a CAN FD frame for transmission. Setting the CANFD_ESI bit can make
   --  sense for virtual CAN interfaces to test applications with echoed frames.
   --  
   CANFD_BRS : constant := 16#01#;
   CANFD_ESI : constant := 16#02#;

   --  CAN flexible data rate frame payload data
   type Canfd_Dlc_Type is range 0 .. 64;
   type Canfd_Frame_Data_Array is array (Canfd_Dlc_Type range 1 .. Canfd_Dlc_Type'Last) of aliased Interfaces.Unsigned_8;

   --  CAN flexible data rate frame defintion 
   type Canfd_Frame is record 
      Can_Id  : aliased Can_Id_Type;            --  32 bit CAN_ID + EFF / RTR / ERR flags 
      Len     : aliased Canfd_Dlc_type;         --  frame payload length in byte 
      Flags   : aliased Interfaces.Unsigned_8;  --  additional flags for CAN FD
      Uu_Res0 : aliased Interfaces.Unsigned_8;  --  reserved / padding 
      Uu_Res1 : aliased Interfaces.Unsigned_8;  --  reserved / padding 
      Data    : aliased Canfd_Frame_Data_Array; --  CAN FD frame payload
   end record;
   
private 
   
   pragma Pack (Can_Frame_Data_Array);
   pragma Convention (C, Can_Frame_Data_Array);

   pragma Convention (C_Pass_By_Copy, can_frame);
   for Can_Frame'Size use 128;
   for Can_Frame use record
      Can_Id   at 0 range  0 .. 31;
      Can_Dlc  at 4 range  0 ..  7;
      Uu_Pad   at 5 range  0 ..  7;
      Uu_Res0  at 6 range  0 ..  7;
      Uu_Res1  at 7 range  0 ..  7;
      Data     at 8 range  0 .. 63;
   end record;

   pragma Pack (Canfd_Frame_Data_Array);
   pragma Convention (C, Canfd_Frame_Data_Array);

   pragma Convention (C_Pass_By_Copy, canfd_frame);
   for Canfd_Frame' Size use 576;
   for Canfd_Frame use record 
      Can_Id  at 0 range 0 ..  31;
      Len     at 4 range 0 ..   7;
      Flags   at 5 range 0 ..   7;
      Uu_Res0 at 6 range 0 ..   7;
      Uu_Res1 at 7 range 0 ..   7;
      Data    at 8 range 0 .. 511;
   end record;
   
end Sockets.Can_Frame;
